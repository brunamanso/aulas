# Linguagem de Programação II
# AC09 SI2B - LMS
# Antonio Nicolas RA: 1800816
# Bruna Manso RA: 1900726
# Pablo Kalil RA: 1900997


import datetime
from sqlalchemy import create_engine, Column
from sqlalchemy import Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from getpass import getpass


eng = create_engine(f"mssql+pymssql://salas\\1900400:{getpass()}@sql.salas.aulas/fit_alunos")
Base = declarative_base(eng)

Session = sessionmaker(eng)
ses = Session()

# Classes a serem criadas
# Crie todos os atributos (colunas) para as classes abaixo


class Usuario(Base):
    __tablename__ = 'Usuário'
    id_usuario = Column('IdUsuario', Integer, primary_key=True)
    id_login = Column('IdLogin', String(30))
    senha = Column('Senha', String(30))
    dt_expiracao = Column('DataExperiração')
    pass


class Aluno(Base):
    __tablename__ = 'Aluno'
    id_aluno = Column('IdAluno', Integer, primary_key=True)
    id_usuario = Column('IdUsuario', Integer)
    nome = Column('Nome', String(100))
    email = Column('Email', String(50))
    celular = Column('Celular', String(14))
    ra = Column('RA', Integer)
    pass


class Professor(Base):
    __tablename__ = 'Professor'
    id_professor = Column('IdProfessor', Integer, primary_key=True)
    id_usuario = Column('IdUsuario', Integer)
    email = Column('Email', String(50))
    celular = Column('Celular', String(14))
    apelido = Column('Apelido', String(15))
    pass


class Coordenador(Base):
    __tablename__ = 'Coordenador'
    id_coordenador = Column('IdCoordenador', Integer, primary_key=True)
    id_usuario = Column('IdUsuario', Integer)
    nome = Column('Nome', String(30))
    email = Column('Email', String(50))
    celular = Column('Celular', String(14))
    pass


class Disciplina(Base):
    __tablename__ = 'Disciplina'
    id_disciplina = Column('IdDisciplina', Integer, primary_key=True)
    nome = Column('Nome', String(50))
    data_disciplina = Column('DataDisciplina',)
    status_disciplina = Column('StatusDisciplina', String(8))
    plano_de_ensino = Column('PlanoDeEnsino', String(500))
    carga_horaria = Column('CargaHoraria', Integer)
    competencias = Column('Competencias', String(500))
    habilidades = Column('Habilidades', String(500))
    ementa = Column('Ementa', String(500))
    id_coordenador = Column('IdCoordenador', Integer)
    conteudo_programatico = Column('ConteudoProgramatico', String(500))
    bibliografia_basica = Column('BibliografiaBasica', String(500))
    bibliografia_complementar = Column('BibliografiaComplementar', String(500))
    percentual_pratico = Column('PercentualPratico', Integer)
    percentual_teorico = Column('PercentualTeorico', Integer)
    pass


class Curso(Base):
    __tablename__ = 'Curso'
    id_curso = Column('IdCurso', Integer, primary_key=True)
    nome = Column('Nome', String(50))
    pass


# Funções de Query para implementar

def lista_alunos():
    alunos = []
    aluno = ses.query(Aluno).all()
    for i in aluno:
        alunos.append(i.nome)
    return alunos
    pass


def lista_cursos():
    cursos = []
    curs = ses.query(Curso).all()
    for i in curs:
        cursos.append(i.nome)
    return cursos
    pass


def lista_professores():
    professores = []
    prof = ses.query(Professor).all()
    for i in prof:
        professores.append(i.apelido)
    return professores
    pass


def lista_coordenadores():
    coordenadores = []
    coord = ses.query(Coordenador).all()
    for i in coord:
        coordenadores.append(i.nome)
    return coordenadores
    pass


def lista_disciplinas():
    disciplinas = []
    disc = ses.query(Disciplina).all()
    for i in disc:
        disciplinas.append(i.nome)
    return disciplinas
    pass


def carga_horaria_total():
    soma = 0
    disc = ses.query(Disciplina).all()
    for i in disc:
        soma += i.carga_horaria
    return soma
    pass
